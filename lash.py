# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lash', [dirname(__file__)])
        except ImportError:
            import _lash
            return _lash
        if fp is not None:
            try:
                _mod = imp.load_module('_lash', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _lash = swig_import_helper()
    del swig_import_helper
else:
    import _lash
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


LASH_DEFAULT_PORT = _lash.LASH_DEFAULT_PORT
LASH_Config_Data_Set = _lash.LASH_Config_Data_Set
LASH_Config_File = _lash.LASH_Config_File
LASH_Server_Interface = _lash.LASH_Server_Interface
LASH_No_Autoresume = _lash.LASH_No_Autoresume
LASH_Terminal = _lash.LASH_Terminal
LASH_Client_Name = _lash.LASH_Client_Name
LASH_Jack_Client_Name = _lash.LASH_Jack_Client_Name
LASH_Alsa_Client_ID = _lash.LASH_Alsa_Client_ID
LASH_Save_File = _lash.LASH_Save_File
LASH_Restore_File = _lash.LASH_Restore_File
LASH_Save_Data_Set = _lash.LASH_Save_Data_Set
LASH_Restore_Data_Set = _lash.LASH_Restore_Data_Set
LASH_Save = _lash.LASH_Save
LASH_Quit = _lash.LASH_Quit
LASH_Server_Lost = _lash.LASH_Server_Lost
LASH_Project_Add = _lash.LASH_Project_Add
LASH_Project_Remove = _lash.LASH_Project_Remove
LASH_Project_Dir = _lash.LASH_Project_Dir
LASH_Project_Name = _lash.LASH_Project_Name
LASH_Client_Add = _lash.LASH_Client_Add
LASH_Client_Remove = _lash.LASH_Client_Remove
LASH_Percentage = _lash.LASH_Percentage
LASH_PROTOCOL_MAJOR = _lash.LASH_PROTOCOL_MAJOR
LASH_PROTOCOL_MINOR = _lash.LASH_PROTOCOL_MINOR
LASH_PROTOCOL_MAJOR_MASK = _lash.LASH_PROTOCOL_MAJOR_MASK
LASH_PROTOCOL_MINOR_MASK = _lash.LASH_PROTOCOL_MINOR_MASK

def lash_protocol_string(*args):
  return _lash.lash_protocol_string(*args)
lash_protocol_string = _lash.lash_protocol_string

def lash_extract_args(*args):
  return _lash.lash_extract_args(*args)
lash_extract_args = _lash.lash_extract_args

def lash_init(*args):
  return _lash.lash_init(*args)
lash_init = _lash.lash_init

def lash_get_server_name(*args):
  return _lash.lash_get_server_name(*args)
lash_get_server_name = _lash.lash_get_server_name

def lash_get_pending_event_count(*args):
  return _lash.lash_get_pending_event_count(*args)
lash_get_pending_event_count = _lash.lash_get_pending_event_count

def lash_get_event(*args):
  return _lash.lash_get_event(*args)
lash_get_event = _lash.lash_get_event

def lash_get_pending_config_count(*args):
  return _lash.lash_get_pending_config_count(*args)
lash_get_pending_config_count = _lash.lash_get_pending_config_count

def lash_get_config(*args):
  return _lash.lash_get_config(*args)
lash_get_config = _lash.lash_get_config

def lash_send_event(*args):
  return _lash.lash_send_event(*args)
lash_send_event = _lash.lash_send_event

def lash_send_config(*args):
  return _lash.lash_send_config(*args)
lash_send_config = _lash.lash_send_config

def lash_server_connected(*args):
  return _lash.lash_server_connected(*args)
lash_server_connected = _lash.lash_server_connected

def lash_jack_client_name(*args):
  return _lash.lash_jack_client_name(*args)
lash_jack_client_name = _lash.lash_jack_client_name

def lash_alsa_client_id(*args):
  return _lash.lash_alsa_client_id(*args)
lash_alsa_client_id = _lash.lash_alsa_client_id

def init(*args):
  return _lash.init(*args)
init = _lash.init

def lash_event_new():
  return _lash.lash_event_new()
lash_event_new = _lash.lash_event_new

def lash_event_new_with_type(*args):
  return _lash.lash_event_new_with_type(*args)
lash_event_new_with_type = _lash.lash_event_new_with_type

def lash_event_new_with_all(*args):
  return _lash.lash_event_new_with_all(*args)
lash_event_new_with_all = _lash.lash_event_new_with_all

def lash_event_destroy(*args):
  return _lash.lash_event_destroy(*args)
lash_event_destroy = _lash.lash_event_destroy

def lash_event_get_type(*args):
  return _lash.lash_event_get_type(*args)
lash_event_get_type = _lash.lash_event_get_type

def lash_event_get_string(*args):
  return _lash.lash_event_get_string(*args)
lash_event_get_string = _lash.lash_event_get_string

def lash_event_get_project(*args):
  return _lash.lash_event_get_project(*args)
lash_event_get_project = _lash.lash_event_get_project

def lash_event_get_client_id(*args):
  return _lash.lash_event_get_client_id(*args)
lash_event_get_client_id = _lash.lash_event_get_client_id

def lash_event_set_type(*args):
  return _lash.lash_event_set_type(*args)
lash_event_set_type = _lash.lash_event_set_type

def lash_event_set_string(*args):
  return _lash.lash_event_set_string(*args)
lash_event_set_string = _lash.lash_event_set_string

def lash_event_set_project(*args):
  return _lash.lash_event_set_project(*args)
lash_event_set_project = _lash.lash_event_set_project

def lash_event_set_client_id(*args):
  return _lash.lash_event_set_client_id(*args)
lash_event_set_client_id = _lash.lash_event_set_client_id

def lash_event_set_alsa_client_id(*args):
  return _lash.lash_event_set_alsa_client_id(*args)
lash_event_set_alsa_client_id = _lash.lash_event_set_alsa_client_id

def lash_event_get_alsa_client_id(*args):
  return _lash.lash_event_get_alsa_client_id(*args)
lash_event_get_alsa_client_id = _lash.lash_event_get_alsa_client_id

def lash_str_set_alsa_client_id(*args):
  return _lash.lash_str_set_alsa_client_id(*args)
lash_str_set_alsa_client_id = _lash.lash_str_set_alsa_client_id

def lash_str_get_alsa_client_id(*args):
  return _lash.lash_str_get_alsa_client_id(*args)
lash_str_get_alsa_client_id = _lash.lash_str_get_alsa_client_id

def lash_config_new():
  return _lash.lash_config_new()
lash_config_new = _lash.lash_config_new

def lash_config_dup(*args):
  return _lash.lash_config_dup(*args)
lash_config_dup = _lash.lash_config_dup

def lash_config_new_with_key(*args):
  return _lash.lash_config_new_with_key(*args)
lash_config_new_with_key = _lash.lash_config_new_with_key

def lash_config_destroy(*args):
  return _lash.lash_config_destroy(*args)
lash_config_destroy = _lash.lash_config_destroy

def lash_config_get_key(*args):
  return _lash.lash_config_get_key(*args)
lash_config_get_key = _lash.lash_config_get_key

def lash_config_get_value(*args):
  return _lash.lash_config_get_value(*args)
lash_config_get_value = _lash.lash_config_get_value

def lash_config_get_value_size(*args):
  return _lash.lash_config_get_value_size(*args)
lash_config_get_value_size = _lash.lash_config_get_value_size

def lash_config_set_key(*args):
  return _lash.lash_config_set_key(*args)
lash_config_set_key = _lash.lash_config_set_key

def lash_config_set_value(*args):
  return _lash.lash_config_set_value(*args)
lash_config_set_value = _lash.lash_config_set_value

def lash_config_get_value_int(*args):
  return _lash.lash_config_get_value_int(*args)
lash_config_get_value_int = _lash.lash_config_get_value_int

def lash_config_get_value_float(*args):
  return _lash.lash_config_get_value_float(*args)
lash_config_get_value_float = _lash.lash_config_get_value_float

def lash_config_get_value_double(*args):
  return _lash.lash_config_get_value_double(*args)
lash_config_get_value_double = _lash.lash_config_get_value_double

def lash_config_get_value_string(*args):
  return _lash.lash_config_get_value_string(*args)
lash_config_get_value_string = _lash.lash_config_get_value_string

def lash_config_set_value_int(*args):
  return _lash.lash_config_set_value_int(*args)
lash_config_set_value_int = _lash.lash_config_set_value_int

def lash_config_set_value_float(*args):
  return _lash.lash_config_set_value_float(*args)
lash_config_set_value_float = _lash.lash_config_set_value_float

def lash_config_set_value_double(*args):
  return _lash.lash_config_set_value_double(*args)
lash_config_set_value_double = _lash.lash_config_set_value_double

def lash_config_set_value_string(*args):
  return _lash.lash_config_set_value_string(*args)
lash_config_set_value_string = _lash.lash_config_set_value_string


